# -*- coding: utf-8 -*-
"""
/***************************************************************************
 XYZ_Importer
                                 A QGIS plugin
 Import multiple XYZ Files from Echosounder at once
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-01
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Max Ramstorfer
        email                : maximilianramstorfer@kabsi.at
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


# Tutorial from https://www.qgistutorials.com/en/docs/3/building_a_python_plugin.html

from pickle import FALSE, TRUE
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject
# User
from PyQt5.QtWidgets import QAction, QFileDialog, QTableWidgetItem
import glob, os
from qgis.core import QgsVectorLayer, QgsField, QgsFields, QgsGeometry, QgsFeature, QgsPointXY, QgsWkbTypes, QgsVectorFileWriter, QgsCoordinateReferenceSystem
from PyQt5.QtCore import QVariant
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .xyz_importer_dialog import XYZ_ImporterDialog
import os.path



class XYZ_Importer:
    """QGIS Plugin Implementation."""

    # Globale Variablen
    glob_filelist = list()
    glob_seperator = ' '
    glob_layers_all = FALSE
    glob_layers_sep = FALSE
    glob_fx = 0
    glob_fy = 1
    glob_fz = 2
    glob_fm = 3
    glob_outfolder = ""
    glob_zerocheck = FALSE
    


    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'XYZ_Importer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&XYZ Importer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('XYZ_Importer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/xyz_importer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'XYZ Importer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&XYZ Importer'),
                action)
            self.iface.removeToolBarIcon(action)

    def getOptions(self):
        if self.dlg.check_all.isChecked():
            self.glob_layers_all = TRUE
            #print("All True")
        else:
            self.glob_layers_all = FALSE  
            #print("All False")

        if self.dlg.check_seperate.isChecked():
            self.glob_layers_sep = TRUE
            #print("Sep True")
        else:
            self.glob_layers_sep = FALSE  
            #print("Sep False")
        
        if self.dlg.check_tab.isChecked():
            self.glob_seperator = '\t'
        if self.dlg.check_semi.isChecked():
            self.glob_seperator = ';'
        if self.dlg.check_leer.isChecked():
            self.glob_seperator = ' '
        if self.dlg.check_doppel.isChecked():
            self.glob_seperator = ':'
        if self.dlg.check_komma.isChecked():
            self.glob_seperator = ','
        if self.dlg.check_zero.isChecked():
            self.glob_zerocheck = TRUE
          
    def selectOUTFolder(self):
        foldername = QFileDialog.getExistingDirectory(self.dlg, "Select output folder ", "", QFileDialog.ShowDirsOnly)
        self.dlg.text_output.setText(foldername)
        self.glob_outfolder = foldername

    def selectFolder(self):
        #filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file ", "", '*.xyz')
        self.getOptions()
        foldername = QFileDialog.getExistingDirectory(self.dlg, "Select input folder ", "", QFileDialog.ShowDirsOnly)
        self.dlg.tex_path.setText(foldername)
        f = []
        ext = self.dlg.text_extension.text()
        os.chdir(foldername)
        for file in glob.glob("*."+ext): 
            #print(file)
            self.glob_filelist.append(file)
        
        if len(self.glob_filelist) > 0:
            file = open(self.glob_filelist[0], 'r')
            count = 0
            Lines = file.readlines()
            for line in Lines:
                parts = line.split(self.glob_seperator)
                siz = len(parts) # anzahl der Spalten
                if count == 1:                    
                    self.dlg.table_preview.setColumnCount(4)
                    self.dlg.table_preview.setRowCount(12)
                    hdnames = ['X','Y','Z','M']
                    for i in range(siz):
                        hdnames.append("Feld "+str(i))
                    self.dlg.table_preview.setHorizontalHeaderLabels(hdnames)
                    self.dlg.combo_x.clear()
                    self.dlg.combo_y.clear()
                    self.dlg.combo_z.clear()
                    self.dlg.combo_m.clear()
                    for i in range(siz):
                        self.dlg.combo_x.addItem("Feld "+str(i))
                        self.dlg.combo_y.addItem("Feld "+str(i))
                        self.dlg.combo_z.addItem("Feld "+str(i))
                        self.dlg.combo_m.addItem("Feld "+str(i))
                #for i in range(siz):
                #    self.dlg.table_preview.setItem(count,i,QTableWidgetItem(parts[i]))
                count += 1
                #print(line)

                if count == 10:
                    break

    def showPreview(self):

        self.glob_fx = self.dlg.combo_x.currentIndex()
        self.glob_fy = self.dlg.combo_y.currentIndex()
        self.glob_fz = self.dlg.combo_z.currentIndex()
        self.glob_fm = self.dlg.combo_m.currentIndex()

        if len(self.glob_filelist) > 0:
            file = open(self.glob_filelist[0], 'r')
            count = 0
            Lines = file.readlines()
            count = 0
            for line in Lines:
                parts = line.split(self.glob_seperator)
                self.dlg.table_preview.setItem(count,0,QTableWidgetItem(parts[self.glob_fx]))
                self.dlg.table_preview.setItem(count,1,QTableWidgetItem(parts[self.glob_fy]))
                self.dlg.table_preview.setItem(count,2,QTableWidgetItem(parts[self.glob_fz]))
                self.dlg.table_preview.setItem(count,3,QTableWidgetItem(parts[self.glob_fm]))
                count += 1

      

    def populateEPSGcombo(self):
        self.dlg.combo_system.clear()
        ep = QSettings().value('UI/recentProjectionsAuthId')
        for i in range(len(ep)):
            self.dlg.combo_system.addItem(ep[i])

    def makeAllLayer(self):
        prefix = self.dlg.text_prefix.text()
        ant_offset = float(self.dlg.spin_ant_offset.value())
        swm_offset = float(self.dlg.spin_schwimmer_offset.value())
        path_a = self.glob_outfolder+"/"
        path = path_a+prefix+"_AllXYZdata"+".shp"
        logpath = path_a+"wrongFileLog.txt"
        epsg = self.dlg.combo_system.currentText()
        zerocounter = 0
        prezerofile = ""
        logfile =  open(logpath, 'w')
        #mainlayer = QgsVectorLayer("Point?crs=epsg:4326", prefix+"_AllXYZdata", "memory")
        #mainpr = mainlayer.dataProvider()
        layerFields = QgsFields()
        layerFields.append(QgsField("PID", QVariant.Int ))
        layerFields.append(QgsField("Filename", QVariant.String ))
        layerFields.append(QgsField("X", QVariant.Double ))
        layerFields.append(QgsField("Y", QVariant.Double ))
        layerFields.append(QgsField("Z", QVariant.Double ))
        layerFields.append(QgsField("Ant_offs", QVariant.Double ))
        layerFields.append(QgsField("Sens_offs", QVariant.Double ))
        layerFields.append(QgsField("Calc_Z", QVariant.Double ))
        layerFields.append(QgsField("M", QVariant.Double ))

        writer = QgsVectorFileWriter(path, 'UTF-8', layerFields, QgsWkbTypes.Point, QgsCoordinateReferenceSystem(epsg), 'ESRI Shapefile')

        
        if len(self.glob_filelist) > 0:
            for i in range(len(self.glob_filelist)):
                file = open(self.glob_filelist[i], 'r')
                Lines = file.readlines()
                count = 0
                for line in Lines:
                    fut = QgsFeature()
                    parts = line.split(self.glob_seperator)
                    f = QgsFeature()
                    x = float(parts[self.glob_fx])
                    y = float(parts[self.glob_fy])
                    z = float(parts[self.glob_fz])
                    zcalc = float(parts[self.glob_fz])+swm_offset
                    m = float(parts[self.glob_fm])-ant_offset
                    if self.glob_zerocheck == TRUE: 
                        if x!=0 and y!=0 and z!=0:
                            fut.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
                            fut.setAttributes([count, self.glob_filelist[i], x, y, z, ant_offset, swm_offset, zcalc, m])
                            writer.addFeature(fut)
                            count += 1
                        else:
                            zerocounter += 1
                            
                            if self.glob_filelist[i] != prezerofile: 
                                self.dlg.table_console.append("[ALL] "+self.glob_filelist[i])
                                logfile.write(self.glob_filelist[i]+"\r\n")
                            prezerofile = self.glob_filelist[i]
                    else:
                        fut.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
                        fut.setAttributes([count, self.glob_filelist[i], x, y, z, ant_offset, swm_offset, zcalc, m])
                        writer.addFeature(fut)
                        count += 1 
            layer = iface.addVectorLayer(path, '', 'ogr')
            del(writer)
            #QgsProject.instance().addMapLayer(mainlayer) 
            self.dlg.table_console.append("[ALL] Layerpath: "+path)
            self.dlg.lable_zero.setText("Found Zero: "+str(zerocounter))
            logfile.close
            #writer = QgsVectorFileWriter(path,mainpr.encoding(), mainpr.fields(), QgsWkbTypes.Polygon, mainpr.crs())  
    
    
    
    def makeSingleLayers(self):
        prefix = self.dlg.text_prefix.text()
        ant_offset = float(self.dlg.spin_ant_offset.value())
        swm_offset = float(self.dlg.spin_schwimmer_offset.value())
        epsg = self.dlg.combo_system.currentText()
        zerocounter = 0
        #mainlayer = QgsVectorLayer("Point?crs=epsg:4326", prefix+"_AllXYZdata", "memory")
        #mainpr = mainlayer.dataProvider()
        layerFields = QgsFields()
        layerFields.append(QgsField("PID", QVariant.Int ))
        layerFields.append(QgsField("Filename", QVariant.String ))
        layerFields.append(QgsField("X", QVariant.Double ))
        layerFields.append(QgsField("Y", QVariant.Double ))
        layerFields.append(QgsField("Z", QVariant.Double ))
        layerFields.append(QgsField("Ant_offs", QVariant.Double ))
        layerFields.append(QgsField("Sens_offs", QVariant.Double ))
        layerFields.append(QgsField("Calc_Z", QVariant.Double ))
        layerFields.append(QgsField("M", QVariant.Double ))
        root = QgsProject.instance().layerTreeRoot()
        myGroup = root.addGroup(prefix)  

        if len(self.glob_filelist) > 0:
            for i in range(len(self.glob_filelist)):
                path = self.glob_outfolder+"/"+prefix+"_"+self.glob_filelist[i]+".shp"
                writer = QgsVectorFileWriter(path, 'UTF-8', layerFields, QgsWkbTypes.Point, QgsCoordinateReferenceSystem(epsg), 'ESRI Shapefile')
                
                file = open(self.glob_filelist[i], 'r')
                Lines = file.readlines()
                count = 0
                for line in Lines:
                    parts = line.split(self.glob_seperator)
                    fut = QgsFeature()
                    x = float(parts[self.glob_fx])
                    y = float(parts[self.glob_fy])
                    z = float(parts[self.glob_fz])
                    zcalc = float(parts[self.glob_fz])+swm_offset
                    m = float(parts[self.glob_fm])-ant_offset
                    if self.glob_zerocheck == TRUE: 
                        if x!=0 and y!=0 and z!=0:
                            fut.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
                            fut.setAttributes([count, self.glob_filelist[i], x, y, z, ant_offset, swm_offset, zcalc, m])
                            writer.addFeature(fut)
                            count += 1
                        else:
                            zerocounter +=1
                            #self.dlg.table_console.append("[SINGLE] "+self.glob_filelist[i])
                    else:
                            fut.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
                            fut.setAttributes([count, self.glob_filelist[i], x, y, z, ant_offset, swm_offset, zcalc, m])
                            writer.addFeature(fut)
                            count += 1
                layer = iface.addVectorLayer(path, '', 'ogr')
                del(writer)
                QgsProject.instance().addMapLayer(layer)   
                root = QgsProject.instance().layerTreeRoot()
                layerX = root.findLayer(layer.id())
                clone = layerX.clone()
                myGroup.insertChildNode(0, clone)
                root.removeChildNode(layerX)
            self.dlg.table_console.append("[SINGLE] Layerpath: "+path)
            self.dlg.lable_zero.setText("Found Zero: "+str(zerocounter))

    def doMainAction(self):
        self.dlg.lable_status.setText("Status: working...")
        print("Make Layers")
        self.getOptions()
        if self.glob_layers_all == TRUE:
            self.makeAllLayer()
            print("Making Main Layer")
        if self.glob_layers_sep == TRUE:
            self.makeSingleLayers()
            print("Making Seperate Layer")
        self.dlg.lable_status.setText("Status: done!")

#////////////////////////////////////////////////////////////////////////////////////////////////////////////
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = XYZ_ImporterDialog()
            self.dlg.button_select.clicked.connect(self.selectFolder)
            self.dlg.button_show.clicked.connect(self.showPreview)
            self.dlg.button_go.clicked.connect(self.doMainAction)
            self.dlg.button_output.clicked.connect(self.selectOUTFolder)
            self.populateEPSGcombo()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
#////////////////////////////////////////////////////////////////////////////////////////////////////////////        

# Select a folder
# scan the folder for extension files

# open the first file and split lines by selected seperator
# add number of fileds in the comboboxes as "feld 1" usw.
# add the lines parts in the table

# if all to one is selected, create one new layer and add all points to it. 
# create fileds id, filename, x y z m 


    



   # //////////////////////////////////////////////////////////////////////////////////////////////////////////////    
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


    # def makeAllLayer(self):
    #     prefix = self.dlg.text_prefix.text()
    #     ant_offset = float(self.dlg.spin_ant_offset.value())
    #     swm_offset = float(self.dlg.spin_schwimmer_offset.value())
    #     mainlayer = QgsVectorLayer("Point?crs=epsg:4326", prefix+"_AllXYZdata", "memory")
    #     mainpr = mainlayer.dataProvider()
    #     mainpr.addAttributes([QgsField("PID", QVariant.Int ),
    #                         QgsField("Filename", QVariant.String),
    #                         QgsField("X", QVariant.Double),
    #                         QgsField("Y", QVariant.Double),
    #                         QgsField("Z", QVariant.Double),
    #                         QgsField("M", QVariant.Double)])
    #     mainlayer.updateFields()
    #     if len(self.glob_filelist) > 0:
    #         for i in range(len(self.glob_filelist)):
    #             file = open(self.glob_filelist[i], 'r')
    #             Lines = file.readlines()
    #             count = 0
    #             for line in Lines:
    #                 parts = line.split(self.glob_seperator)
    #                 f = QgsFeature()
    #                 x = float(parts[self.glob_fx])
    #                 y = float(parts[self.glob_fy])
    #                 z = float(parts[self.glob_fz])+swm_offset
    #                 m = float(parts[self.glob_fm])-ant_offset
    #                 f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
    #                 f.setAttributes([count, self.glob_filelist[i], x, y, z, m])
    #                 mainpr.addFeature(f)
    #                 count += 1 
    #         mainlayer.updateExtents() 
    #         QgsProject.instance().addMapLayer(mainlayer) 
    #         path = self.glob_outfolder+"/"+prefix+"_AllXYZdata"+".shp"
    #         print("Layerpath: "+path)  
    #         writer = QgsVectorFileWriter(path,mainpr.encoding(), mainpr.fields(), QgsWkbTypes.Polygon, mainpr.crs())  


    # def makeSingleLayers(self):
    #     prefix = self.dlg.text_prefix.text()
    #     root = QgsProject.instance().layerTreeRoot()
    #     myGroup = root.addGroup(prefix)  
    #     if len(self.glob_filelist) > 0:
    #         for i in range(len(self.glob_filelist)):
    #             layer = QgsVectorLayer("Point", prefix+"_"+self.glob_filelist[i], "memory")
    #             pr = layer.dataProvider()
    #             pr.addAttributes([QgsField("PID", QVariant.Int),
    #                         QgsField("Filename", QVariant.String),
    #                         QgsField("X", QVariant.Double),
    #                         QgsField("Y", QVariant.Double),
    #                         QgsField("Z", QVariant.Double),
    #                         QgsField("Ant_offs", QVariant.Double),
    #                         QgsField("Sens_offs", QVariant.Double),
    #                         QgsField("Calc_Z", QVariant.Double),
    #                         QgsField("M", QVariant.Double)])
    #             layer.updateFields()
    #             file = open(self.glob_filelist[i], 'r')
    #             Lines = file.readlines()
    #             count = 0
    #             for line in Lines:
    #                 parts = line.split(self.glob_seperator)
    #                 f = QgsFeature()
    #                 x = float(parts[self.glob_fx])
    #                 y = float(parts[self.glob_fy])
    #                 f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
    #                 f.setAttributes([count, self.glob_filelist[i], float(parts[self.glob_fx]), float(parts[self.glob_fy]), float(parts[self.glob_fz]), float(parts[self.glob_fm])])
    #                 pr.addFeature(f)
    #                 count += 1 
    #             layer.updateExtents() 
    #             QgsProject.instance().addMapLayer(layer)   
    #             root = QgsProject.instance().layerTreeRoot()
    #             layerX = root.findLayer(layer.id())
    #             clone = layerX.clone()
    #             myGroup.insertChildNode(0, clone)
    #             root.removeChildNode(layerX)